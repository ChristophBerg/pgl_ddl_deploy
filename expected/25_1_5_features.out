SET client_min_messages TO warning;
INSERT INTO pgl_ddl_deploy.set_configs (set_name, include_schema_regex, lock_safe_deployment, allow_multi_statements)
VALUES ('test1','.*',true, true);
-- It's generally good to use queue_subscriber_failures with include_everything, so a bogus grant won't break replication on subscriber
INSERT INTO pgl_ddl_deploy.set_configs (set_name, include_everything, queue_subscriber_failures, create_tags)
VALUES ('test1',true, true, '{GRANT,REVOKE}');
SELECT pgl_ddl_deploy.deploy(id) FROM pgl_ddl_deploy.set_configs WHERE set_name = 'test1';
 deploy 
--------
 t
 t
(2 rows)

DISCARD TEMP;
SET search_path TO public;
SET ROLE test_pgl_ddl_deploy;
CREATE TABLE foo(id serial primary key, bla int);
SELECT set_name, ddl_sql_raw, ddl_sql_sent FROM pgl_ddl_deploy.events ORDER BY id DESC LIMIT 10;
 set_name |                    ddl_sql_raw                    |                   ddl_sql_sent                    
----------+---------------------------------------------------+---------------------------------------------------
 test1    | CREATE TABLE foo(id serial primary key, bla int); | CREATE TABLE foo(id serial primary key, bla int);
(1 row)

GRANT SELECT ON foo TO PUBLIC; 
SELECT c.set_name, ddl_sql_raw, ddl_sql_sent, c.include_everything
FROM pgl_ddl_deploy.events e
INNER JOIN pgl_ddl_deploy.set_configs c ON c.id = e.set_config_id
ORDER BY e.id DESC LIMIT 10;
 set_name |                    ddl_sql_raw                    |                   ddl_sql_sent                    | include_everything 
----------+---------------------------------------------------+---------------------------------------------------+--------------------
 test1    | GRANT SELECT ON foo TO PUBLIC;                    | GRANT SELECT ON foo TO PUBLIC;                    | t
 test1    | CREATE TABLE foo(id serial primary key, bla int); | CREATE TABLE foo(id serial primary key, bla int); | f
(2 rows)

INSERT INTO foo (bla) VALUES (1),(2),(3);
REVOKE INSERT ON foo FROM PUBLIC;
DROP TABLE foo CASCADE;
SELECT c.set_name, ddl_sql_raw, ddl_sql_sent, c.include_everything
FROM pgl_ddl_deploy.events e
INNER JOIN pgl_ddl_deploy.set_configs c ON c.id = e.set_config_id
ORDER BY e.id DESC LIMIT 10;
 set_name |                    ddl_sql_raw                    |                   ddl_sql_sent                    | include_everything 
----------+---------------------------------------------------+---------------------------------------------------+--------------------
 test1    | DROP TABLE foo CASCADE;                           | DROP TABLE foo CASCADE;                           | f
 test1    | REVOKE INSERT ON foo FROM PUBLIC;                 | REVOKE INSERT ON foo FROM PUBLIC;                 | t
 test1    | GRANT SELECT ON foo TO PUBLIC;                    | GRANT SELECT ON foo TO PUBLIC;                    | t
 test1    | CREATE TABLE foo(id serial primary key, bla int); | CREATE TABLE foo(id serial primary key, bla int); | f
(4 rows)

SELECT * FROM pgl_ddl_deploy.unhandled;
 id | set_name | pid | executed_at | ddl_sql_raw | command_tag | reason | txid | set_config_id | resolved | resolved_notes 
----+----------+-----+-------------+-------------+-------------+--------+------+---------------+----------+----------------
(0 rows)

SELECT * FROM pgl_ddl_deploy.exceptions;
 id | set_name | pid | executed_at | ddl_sql | err_msg | err_state | set_config_id | resolved | resolved_notes 
----+----------+-----+-------------+---------+---------+-----------+---------------+----------+----------------
(0 rows)

/*****
Test cancel and terminate blocker functionality
*****/
SET ROLE postgres;
UPDATE pgl_ddl_deploy.set_configs SET signal_blocking_subscriber_sessions = 'cancel';
SELECT pgl_ddl_deploy.deploy(id) FROM pgl_ddl_deploy.set_configs WHERE set_name = 'test1';
 deploy 
--------
 t
 t
(2 rows)

SET ROLE test_pgl_ddl_deploy;
CREATE TABLE foo(id serial primary key, bla int);
SELECT set_name, ddl_sql_raw, ddl_sql_sent FROM pgl_ddl_deploy.events ORDER BY id DESC LIMIT 10;
 set_name |                    ddl_sql_raw                    |                   ddl_sql_sent                    
----------+---------------------------------------------------+---------------------------------------------------
 test1    | CREATE TABLE foo(id serial primary key, bla int); | CREATE TABLE foo(id serial primary key, bla int);
 test1    | DROP TABLE foo CASCADE;                           | DROP TABLE foo CASCADE;
 test1    | REVOKE INSERT ON foo FROM PUBLIC;                 | REVOKE INSERT ON foo FROM PUBLIC;
 test1    | GRANT SELECT ON foo TO PUBLIC;                    | GRANT SELECT ON foo TO PUBLIC;
 test1    | CREATE TABLE foo(id serial primary key, bla int); | CREATE TABLE foo(id serial primary key, bla int);
(5 rows)

GRANT SELECT ON foo TO PUBLIC; 
SELECT c.set_name, ddl_sql_raw, ddl_sql_sent, c.include_everything
FROM pgl_ddl_deploy.events e
INNER JOIN pgl_ddl_deploy.set_configs c ON c.id = e.set_config_id
ORDER BY e.id DESC LIMIT 10;
 set_name |                    ddl_sql_raw                    |                   ddl_sql_sent                    | include_everything 
----------+---------------------------------------------------+---------------------------------------------------+--------------------
 test1    | GRANT SELECT ON foo TO PUBLIC;                    | GRANT SELECT ON foo TO PUBLIC;                    | t
 test1    | CREATE TABLE foo(id serial primary key, bla int); | CREATE TABLE foo(id serial primary key, bla int); | f
 test1    | DROP TABLE foo CASCADE;                           | DROP TABLE foo CASCADE;                           | f
 test1    | REVOKE INSERT ON foo FROM PUBLIC;                 | REVOKE INSERT ON foo FROM PUBLIC;                 | t
 test1    | GRANT SELECT ON foo TO PUBLIC;                    | GRANT SELECT ON foo TO PUBLIC;                    | t
 test1    | CREATE TABLE foo(id serial primary key, bla int); | CREATE TABLE foo(id serial primary key, bla int); | f
(6 rows)

INSERT INTO foo (bla) VALUES (1),(2),(3);
REVOKE INSERT ON foo FROM PUBLIC;
DROP TABLE foo CASCADE;
SELECT c.set_name, ddl_sql_raw, ddl_sql_sent, c.include_everything
FROM pgl_ddl_deploy.events e
INNER JOIN pgl_ddl_deploy.set_configs c ON c.id = e.set_config_id
ORDER BY e.id DESC LIMIT 10;
 set_name |                    ddl_sql_raw                    |                   ddl_sql_sent                    | include_everything 
----------+---------------------------------------------------+---------------------------------------------------+--------------------
 test1    | DROP TABLE foo CASCADE;                           | DROP TABLE foo CASCADE;                           | f
 test1    | REVOKE INSERT ON foo FROM PUBLIC;                 | REVOKE INSERT ON foo FROM PUBLIC;                 | t
 test1    | GRANT SELECT ON foo TO PUBLIC;                    | GRANT SELECT ON foo TO PUBLIC;                    | t
 test1    | CREATE TABLE foo(id serial primary key, bla int); | CREATE TABLE foo(id serial primary key, bla int); | f
 test1    | DROP TABLE foo CASCADE;                           | DROP TABLE foo CASCADE;                           | f
 test1    | REVOKE INSERT ON foo FROM PUBLIC;                 | REVOKE INSERT ON foo FROM PUBLIC;                 | t
 test1    | GRANT SELECT ON foo TO PUBLIC;                    | GRANT SELECT ON foo TO PUBLIC;                    | t
 test1    | CREATE TABLE foo(id serial primary key, bla int); | CREATE TABLE foo(id serial primary key, bla int); | f
(8 rows)

SELECT * FROM pgl_ddl_deploy.unhandled;
 id | set_name | pid | executed_at | ddl_sql_raw | command_tag | reason | txid | set_config_id | resolved | resolved_notes 
----+----------+-----+-------------+-------------+-------------+--------+------+---------------+----------+----------------
(0 rows)

SELECT * FROM pgl_ddl_deploy.exceptions;
 id | set_name | pid | executed_at | ddl_sql | err_msg | err_state | set_config_id | resolved | resolved_notes 
----+----------+-----+-------------+---------+---------+-----------+---------------+----------+----------------
(0 rows)

CREATE TABLE public.foo(id serial primary key, bla int);
\! PGOPTIONS='--client-min-messages=warning' psql -d contrib_regression  -c "BEGIN; SELECT * FROM public.foo; SELECT pg_sleep(5);" &
SELECT pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

SELECT signal, successful, state, query, reported 
FROM pgl_ddl_deploy.kill_blockers('cancel','public','foo');
 signal | successful | state  |                        query                         | reported 
--------+------------+--------+------------------------------------------------------+----------
 cancel | t          | active | BEGIN; SELECT * FROM public.foo; SELECT pg_sleep(5); | f
(1 row)

\! PGOPTIONS='--client-min-messages=warning' psql -d contrib_regression  -c "BEGIN; SELECT * FROM public.foo; SELECT pg_sleep(5);" &
ERROR:  canceling statement due to user request
SELECT pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

SELECT signal, successful, state, query, reported 
FROM pgl_ddl_deploy.kill_blockers('terminate','public','foo');
  signal   | successful | state  |                        query                         | reported 
-----------+------------+--------+------------------------------------------------------+----------
 terminate | t          | active | BEGIN; SELECT * FROM public.foo; SELECT pg_sleep(5); | f
(1 row)

SELECT pg_sleep(1);
FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
connection to server was lost
 pg_sleep 
----------
 
(1 row)

DROP TABLE public.foo CASCADE;
SELECT id, signal, successful, state, query, reported
FROM pgl_ddl_deploy.killed_blockers
ORDER BY id;
 id | signal | successful | state | query | reported 
----+--------+------------+-------+-------+----------
(0 rows)

