-- Suppress pid-specific warning messages
SET client_min_messages TO error;
INSERT INTO pgl_ddl_deploy.set_configs (set_name, include_schema_regex, lock_safe_deployment, allow_multi_statements)
VALUES ('test1','.*',true, true);
-- It's generally good to use queue_subscriber_failures with include_everything, so a bogus grant won't break replication on subscriber
INSERT INTO pgl_ddl_deploy.set_configs (set_name, include_everything, queue_subscriber_failures, create_tags)
VALUES ('test1',true, true, '{GRANT,REVOKE}');
SELECT pgl_ddl_deploy.deploy(id) FROM pgl_ddl_deploy.set_configs WHERE set_name = 'test1';
 deploy 
--------
 t
 t
(2 rows)

DISCARD TEMP;
SET search_path TO public;
SET ROLE test_pgl_ddl_deploy;
CREATE TABLE foo(id serial primary key, bla int);
SELECT set_name, ddl_sql_raw, ddl_sql_sent FROM pgl_ddl_deploy.events ORDER BY id DESC LIMIT 10;
 set_name |                    ddl_sql_raw                    |                   ddl_sql_sent                    
----------+---------------------------------------------------+---------------------------------------------------
 test1    | CREATE TABLE foo(id serial primary key, bla int); | CREATE TABLE foo(id serial primary key, bla int);
(1 row)

GRANT SELECT ON foo TO PUBLIC; 
SELECT c.set_name, ddl_sql_raw, ddl_sql_sent, c.include_everything
FROM pgl_ddl_deploy.events e
INNER JOIN pgl_ddl_deploy.set_configs c ON c.id = e.set_config_id
ORDER BY e.id DESC LIMIT 10;
 set_name |                    ddl_sql_raw                    |                   ddl_sql_sent                    | include_everything 
----------+---------------------------------------------------+---------------------------------------------------+--------------------
 test1    | GRANT SELECT ON foo TO PUBLIC;                    | GRANT SELECT ON foo TO PUBLIC;                    | t
 test1    | CREATE TABLE foo(id serial primary key, bla int); | CREATE TABLE foo(id serial primary key, bla int); | f
(2 rows)

INSERT INTO foo (bla) VALUES (1),(2),(3);
REVOKE INSERT ON foo FROM PUBLIC;
DROP TABLE foo CASCADE;
SELECT c.set_name, ddl_sql_raw, ddl_sql_sent, c.include_everything
FROM pgl_ddl_deploy.events e
INNER JOIN pgl_ddl_deploy.set_configs c ON c.id = e.set_config_id
ORDER BY e.id DESC LIMIT 10;
 set_name |                    ddl_sql_raw                    |                   ddl_sql_sent                    | include_everything 
----------+---------------------------------------------------+---------------------------------------------------+--------------------
 test1    | DROP TABLE foo CASCADE;                           | DROP TABLE foo CASCADE;                           | f
 test1    | REVOKE INSERT ON foo FROM PUBLIC;                 | REVOKE INSERT ON foo FROM PUBLIC;                 | t
 test1    | GRANT SELECT ON foo TO PUBLIC;                    | GRANT SELECT ON foo TO PUBLIC;                    | t
 test1    | CREATE TABLE foo(id serial primary key, bla int); | CREATE TABLE foo(id serial primary key, bla int); | f
(4 rows)

SELECT * FROM pgl_ddl_deploy.unhandled;
 id | set_name | pid | executed_at | ddl_sql_raw | command_tag | reason | txid | set_config_id | resolved | resolved_notes 
----+----------+-----+-------------+-------------+-------------+--------+------+---------------+----------+----------------
(0 rows)

SELECT * FROM pgl_ddl_deploy.exceptions;
 id | set_name | pid | executed_at | ddl_sql | err_msg | err_state | set_config_id | resolved | resolved_notes 
----+----------+-----+-------------+---------+---------+-----------+---------------+----------+----------------
(0 rows)

/*****
Test cancel and terminate blocker functionality
*****/
SET ROLE postgres;
UPDATE pgl_ddl_deploy.set_configs SET lock_safe_deployment = FALSE, signal_blocking_subscriber_sessions = 'cancel';
SELECT pgl_ddl_deploy.deploy(id) FROM pgl_ddl_deploy.set_configs WHERE set_name = 'test1';
 deploy 
--------
 t
 t
(2 rows)

SET ROLE test_pgl_ddl_deploy;
CREATE TABLE foo(id serial primary key, bla int);
SELECT set_name, ddl_sql_raw, ddl_sql_sent FROM pgl_ddl_deploy.events ORDER BY id DESC LIMIT 10;
 set_name |                    ddl_sql_raw                    |                   ddl_sql_sent                    
----------+---------------------------------------------------+---------------------------------------------------
 test1    | CREATE TABLE foo(id serial primary key, bla int); | CREATE TABLE foo(id serial primary key, bla int);
 test1    | DROP TABLE foo CASCADE;                           | DROP TABLE foo CASCADE;
 test1    | REVOKE INSERT ON foo FROM PUBLIC;                 | REVOKE INSERT ON foo FROM PUBLIC;
 test1    | GRANT SELECT ON foo TO PUBLIC;                    | GRANT SELECT ON foo TO PUBLIC;
 test1    | CREATE TABLE foo(id serial primary key, bla int); | CREATE TABLE foo(id serial primary key, bla int);
(5 rows)

GRANT SELECT ON foo TO PUBLIC; 
SELECT c.set_name, ddl_sql_raw, ddl_sql_sent, c.include_everything
FROM pgl_ddl_deploy.events e
INNER JOIN pgl_ddl_deploy.set_configs c ON c.id = e.set_config_id
ORDER BY e.id DESC LIMIT 10;
 set_name |                    ddl_sql_raw                    |                   ddl_sql_sent                    | include_everything 
----------+---------------------------------------------------+---------------------------------------------------+--------------------
 test1    | GRANT SELECT ON foo TO PUBLIC;                    | GRANT SELECT ON foo TO PUBLIC;                    | t
 test1    | CREATE TABLE foo(id serial primary key, bla int); | CREATE TABLE foo(id serial primary key, bla int); | f
 test1    | DROP TABLE foo CASCADE;                           | DROP TABLE foo CASCADE;                           | f
 test1    | REVOKE INSERT ON foo FROM PUBLIC;                 | REVOKE INSERT ON foo FROM PUBLIC;                 | t
 test1    | GRANT SELECT ON foo TO PUBLIC;                    | GRANT SELECT ON foo TO PUBLIC;                    | t
 test1    | CREATE TABLE foo(id serial primary key, bla int); | CREATE TABLE foo(id serial primary key, bla int); | f
(6 rows)

INSERT INTO foo (bla) VALUES (1),(2),(3);
REVOKE INSERT ON foo FROM PUBLIC;
DROP TABLE foo CASCADE;
SELECT c.set_name, ddl_sql_raw, ddl_sql_sent, c.include_everything
FROM pgl_ddl_deploy.events e
INNER JOIN pgl_ddl_deploy.set_configs c ON c.id = e.set_config_id
ORDER BY e.id DESC LIMIT 10;
 set_name |                    ddl_sql_raw                    |                   ddl_sql_sent                    | include_everything 
----------+---------------------------------------------------+---------------------------------------------------+--------------------
 test1    | DROP TABLE foo CASCADE;                           | DROP TABLE foo CASCADE;                           | f
 test1    | REVOKE INSERT ON foo FROM PUBLIC;                 | REVOKE INSERT ON foo FROM PUBLIC;                 | t
 test1    | GRANT SELECT ON foo TO PUBLIC;                    | GRANT SELECT ON foo TO PUBLIC;                    | t
 test1    | CREATE TABLE foo(id serial primary key, bla int); | CREATE TABLE foo(id serial primary key, bla int); | f
 test1    | DROP TABLE foo CASCADE;                           | DROP TABLE foo CASCADE;                           | f
 test1    | REVOKE INSERT ON foo FROM PUBLIC;                 | REVOKE INSERT ON foo FROM PUBLIC;                 | t
 test1    | GRANT SELECT ON foo TO PUBLIC;                    | GRANT SELECT ON foo TO PUBLIC;                    | t
 test1    | CREATE TABLE foo(id serial primary key, bla int); | CREATE TABLE foo(id serial primary key, bla int); | f
(8 rows)

SELECT * FROM pgl_ddl_deploy.unhandled;
 id | set_name | pid | executed_at | ddl_sql_raw | command_tag | reason | txid | set_config_id | resolved | resolved_notes 
----+----------+-----+-------------+-------------+-------------+--------+------+---------------+----------+----------------
(0 rows)

SELECT * FROM pgl_ddl_deploy.exceptions;
 id | set_name | pid | executed_at | ddl_sql | err_msg | err_state | set_config_id | resolved | resolved_notes 
----+----------+-----+-------------+---------+---------+-----------+---------------+----------+----------------
(0 rows)

CREATE TABLE public.foo(id serial primary key, bla int);
CREATE TABLE public.bar(id serial primary key, bla int);
\! PGOPTIONS='--client-min-messages=warning' psql -d contrib_regression  -c "BEGIN; SELECT * FROM public.foo; SELECT pg_sleep(5);" &
SELECT pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

SELECT signal, successful, state, query, reported, pg_sleep(1) 
FROM pgl_ddl_deploy.kill_blockers('cancel','public','foo');
ERROR:  canceling statement due to user request
 signal | successful | state  |                        query                         | reported | pg_sleep 
--------+------------+--------+------------------------------------------------------+----------+----------
 cancel | t          | active | BEGIN; SELECT * FROM public.foo; SELECT pg_sleep(5); | f        | 
(1 row)

\! PGOPTIONS='--client-min-messages=warning' psql -d contrib_regression  -c "BEGIN; SELECT * FROM public.foo; SELECT pg_sleep(5);" &
SELECT pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

SELECT signal, successful, state, query, reported, pg_sleep(1) 
FROM pgl_ddl_deploy.kill_blockers('terminate','public','foo');
FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
connection to server was lost
  signal   | successful | state  |                        query                         | reported | pg_sleep 
-----------+------------+--------+------------------------------------------------------+----------+----------
 terminate | t          | active | BEGIN; SELECT * FROM public.foo; SELECT pg_sleep(5); | f        | 
(1 row)

\! PGOPTIONS='--client-min-messages=warning' psql -d contrib_regression  -c "BEGIN; SELECT * FROM public.foo; SELECT pg_sleep(5);" &
-- This process should not be killed
\! PGOPTIONS='--client-min-messages=warning' psql -d contrib_regression  -c "BEGIN; INSERT INTO public.bar (bla) VALUES (1); SELECT pg_sleep(2); COMMIT;" > /dev/null &
SELECT pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

SELECT pgl_ddl_deploy.subscriber_command
    (
      p_provider_name := 'test',
      p_set_name := ARRAY['test1'],
      p_nspname := 'public',
      p_relname := 'foo',
      p_ddl_sql_sent := $pgl_ddl_deploy_sql$ALTER TABLE public.foo ADD COLUMN bar text;$pgl_ddl_deploy_sql$,
      p_full_ddl := $pgl_ddl_deploy_sql$
                --Be sure to use provider's search_path for SQL environment consistency
                    SET SEARCH_PATH TO public;

                    ALTER TABLE public.foo ADD COLUMN bar text;
                    ;
                $pgl_ddl_deploy_sql$,
      p_pid := pg_backend_pid(),
      p_set_config_id := 1,
      p_queue_subscriber_failures := false,
      p_signal_blocking_subscriber_sessions := 'cancel',
    -- Lower lock_timeout to make this test run faster
      p_lock_timeout := 300,
    -- This parameter is only marked TRUE for this function to be able to easily run on a provider for regression testing
      p_run_anywhere := TRUE
);
ERROR:  canceling statement due to user request
 subscriber_command 
--------------------
 t
(1 row)

TABLE public.foo;
 id | bla | bar 
----+-----+-----
(0 rows)

-- Now two processes to be killed
\! PGOPTIONS='--client-min-messages=warning' psql -d contrib_regression  -c "BEGIN; SELECT * FROM public.foo; SELECT pg_sleep(5);" &
SELECT pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

-- This process will wait for the one above - but we want it to fail regardless of which gets killed first
-- Avoid it firing our event triggers by using session_replication_role = replica
\! PGOPTIONS='--client-min-messages=warning --session-replication-role=replica' psql -d contrib_regression  -c "BEGIN; ALTER TABLE public.foo DROP COLUMN bar; SELECT pg_sleep(5);" &
SELECT pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

SELECT pgl_ddl_deploy.subscriber_command
    (
      p_provider_name := 'test',
      p_set_name := ARRAY['test1'],
      p_nspname := 'public',
      p_relname := 'foo',
      p_ddl_sql_sent := $pgl_ddl_deploy_sql$ALTER TABLE public.foo ADD COLUMN super text;$pgl_ddl_deploy_sql$,
      p_full_ddl := $pgl_ddl_deploy_sql$
                --Be sure to use provider's search_path for SQL environment consistency
                    SET SEARCH_PATH TO public;

                    ALTER TABLE public.foo ADD COLUMN super text;
                    ;
                $pgl_ddl_deploy_sql$,
      p_pid := pg_backend_pid(),
      p_set_config_id := 1,
      p_queue_subscriber_failures := false,
      p_signal_blocking_subscriber_sessions := 'terminate',
    -- Lower lock_timeout to make this test run faster
      p_lock_timeout := 300,
    -- This parameter is only marked TRUE for this function to be able to easily run on a provider for regression testing
      p_run_anywhere := TRUE
);
FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
connection to server was lost
FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
connection to server was lost
 subscriber_command 
--------------------
 t
(1 row)

TABLE public.foo;
 id | bla | bar | super 
----+-----+-----+-------
(0 rows)

DROP TABLE public.foo CASCADE;
TABLE bar;
 id | bla 
----+-----
  1 |   1
(1 row)

DROP TABLE public.bar CASCADE;
SELECT id, signal, successful, state, query, reported
FROM pgl_ddl_deploy.killed_blockers
ORDER BY id, query;
 id |  signal   | successful | state  |                               query                                | reported 
----+-----------+------------+--------+--------------------------------------------------------------------+----------
  1 | cancel    | t          | active | BEGIN; SELECT * FROM public.foo; SELECT pg_sleep(5);               | f
  2 | terminate | t          | active | BEGIN; SELECT * FROM public.foo; SELECT pg_sleep(5);               | f
  3 | terminate | t          | active | BEGIN; ALTER TABLE public.foo DROP COLUMN bar; SELECT pg_sleep(5); | f
(3 rows)

